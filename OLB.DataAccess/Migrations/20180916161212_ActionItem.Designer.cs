// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OLB.DataAccess;

namespace OLB.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180916161212_ActionItem")]
    partial class ActionItem
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OLB.Domain.ActionItem", b =>
                {
                    b.Property<Guid>("ActionItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionItemStatus")
                        .IsRequired();

                    b.Property<string>("ActionItemUrgency")
                        .IsRequired();

                    b.Property<string>("AgeGroup")
                        .IsRequired();

                    b.Property<DateTimeOffset>("CompletedAt");

                    b.Property<Guid>("CompletedBy");

                    b.Property<string>("Description");

                    b.Property<DateTimeOffset>("RequestedAt");

                    b.Property<Guid>("RequestedBy");

                    b.Property<string>("Title");

                    b.HasKey("ActionItemId");

                    b.ToTable("ActionItems");
                });

            modelBuilder.Entity("OLB.Domain.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("PostalCode");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<string>("StreetSecondary");

                    b.HasKey("AddressId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("OLB.Domain.Application", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ApplicationFeePaid");

                    b.Property<bool>("ApplicationFeeWaived");

                    b.Property<DateTimeOffset>("SubmissionDate");

                    b.HasKey("ApplicationId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("OLB.Domain.ApplicationRequest", b =>
                {
                    b.Property<Guid>("ApplicationRequestId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationRequestStatus")
                        .IsRequired();

                    b.Property<int>("ApplicationRequestType");

                    b.Property<DateTimeOffset>("ExpirationDate");

                    b.Property<DateTimeOffset>("SentAtDate");

                    b.Property<Guid>("SentById");

                    b.Property<string>("SentToEmailAddress");

                    b.Property<DateTimeOffset>("SubmissionDate");

                    b.Property<Guid>("Token");

                    b.HasKey("ApplicationRequestId");

                    b.ToTable("ApplicationRequests");
                });

            modelBuilder.Entity("OLB.Domain.Classroom", b =>
                {
                    b.Property<Guid>("ClassroomId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgeGroup")
                        .IsRequired();

                    b.Property<int>("Capacity");

                    b.Property<string>("Name");

                    b.HasKey("ClassroomId");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("OLB.Domain.Enrollment", b =>
                {
                    b.Property<Guid>("EnrollmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ApplicationId");

                    b.Property<string>("Day")
                        .IsRequired();

                    b.Property<string>("EnrollmentStatus")
                        .IsRequired();

                    b.Property<bool>("IsFlexible");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("OLB.Domain.Parent", b =>
                {
                    b.Property<Guid>("ParentId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddressId");

                    b.Property<Guid?>("ApplicationId");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("CellPhoneNumber");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("HomePhoneNumber");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.HasKey("ParentId");

                    b.HasIndex("AddressId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("OLB.Domain.ParentApplication", b =>
                {
                    b.Property<Guid>("ParentId");

                    b.Property<Guid>("ApplicationId");

                    b.HasKey("ParentId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ParentApplications");
                });

            modelBuilder.Entity("OLB.Domain.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ApplicationId");

                    b.Property<DateTime>("BirthDate");

                    b.Property<DateTime>("DueDate");

                    b.Property<string>("FirstName");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.HasKey("StudentId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("OLB.Domain.StudentParent", b =>
                {
                    b.Property<Guid>("StudentId");

                    b.Property<Guid>("ParentId");

                    b.HasKey("StudentId", "ParentId");

                    b.HasIndex("ParentId");

                    b.ToTable("StudentParents");
                });

            modelBuilder.Entity("OLB.Domain.Enrollment", b =>
                {
                    b.HasOne("OLB.Domain.Application")
                        .WithMany("Enrollments")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OLB.Domain.Parent", b =>
                {
                    b.HasOne("OLB.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("OLB.Domain.Application")
                        .WithMany("Parents")
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("OLB.Domain.ParentApplication", b =>
                {
                    b.HasOne("OLB.Domain.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OLB.Domain.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OLB.Domain.Student", b =>
                {
                    b.HasOne("OLB.Domain.Application")
                        .WithOne("Student")
                        .HasForeignKey("OLB.Domain.Student", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OLB.Domain.StudentParent", b =>
                {
                    b.HasOne("OLB.Domain.Parent", "Parent")
                        .WithMany("StudentParents")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OLB.Domain.Student", "Student")
                        .WithMany("StudentParents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
